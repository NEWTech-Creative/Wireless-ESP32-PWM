//Transmitter code for an esp32 PWM - NEWTechCreative 2024
#include <WiFi.h>
#include <WiFiUdp.h>

const char* ssid = "COREXY_ESP32_transmitter_AP";
const char* password = "12345678";

WiFiUDP udp;
const char* udpAddress = "192.168.4.1";  // Receiver ESP32 AP IP address
const int udpPort = 1234;

const int servoInputPin = 22;  // GPIO pin for servo PWM input signal
const int airPumpInputPin = 23;  // GPIO pin for air pump control signal
const int modePin1 = 25;        // GPIO pin for mode toggle 1 (HIGH for servo mode)
const int modePin2 = 26;        // GPIO pin for mode toggle 2 (HIGH for laser mode)
const int ledPin = 2;           // Onboard LED pin

volatile int servoPulseWidth = 0;
volatile unsigned long lastServoInterruptTime = 0;

void IRAM_ATTR handleServoInterrupt() {
  unsigned long currentTime = micros();
  if (digitalRead(servoInputPin) == HIGH) {
    lastServoInterruptTime = currentTime;
  } else {
    servoPulseWidth = currentTime - lastServoInterruptTime;
  }
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  pinMode(servoInputPin, INPUT);
  pinMode(airPumpInputPin, INPUT_PULLUP);  // Pull-up for digital input
  pinMode(modePin1, INPUT_PULLUP);
  pinMode(modePin2, INPUT_PULLUP);
  pinMode(ledPin, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(servoInputPin), handleServoInterrupt, CHANGE);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
    digitalWrite(ledPin, !digitalRead(ledPin));  // Blink LED
  }

  Serial.println("Connected to WiFi");
  digitalWrite(ledPin, LOW);  // Turn off LED when connected
}

void loop() {
  bool mode1 = !digitalRead(modePin1);  // LOW when not in servo mode
  bool mode2 = !digitalRead(modePin2);  // LOW when not in laser mode

  int mode = mode1 ? 1 : (mode2 ? 2 : 0);  // 0: Servo mode, 1: Laser mode

  // Read air pump signal (digital HIGH or LOW)
  int airPumpSignal = digitalRead(airPumpInputPin);

  // Prepare UDP packet
  char buffer[50];
  int checksum = (servoPulseWidth + airPumpSignal + mode) % 256;  // Simple checksum calculation
  snprintf(buffer, sizeof(buffer), "%d,%d,%d", servoPulseWidth, airPumpSignal, mode);

  // Send UDP packet
  udp.beginPacket(udpAddress, udpPort);
  udp.write((uint8_t*)buffer, strlen(buffer));
  udp.endPacket();

  delay(2);  // Short delay for faster transmission
}
